[{"/Users/himanshu/codeacademy/random-color-picker/src/index.js":"1","/Users/himanshu/codeacademy/random-color-picker/src/App.js":"2","/Users/himanshu/codeacademy/random-color-picker/src/reportWebVitals.js":"3","/Users/himanshu/codeacademy/random-color-picker/src/Random.js":"4","/Users/himanshu/codeacademy/random-color-picker/src/Button.js":"5"},{"size":534,"mtime":1609254241747,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":1609253722106,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609253722107,"results":"9","hashOfConfig":"7"},{"size":993,"mtime":1609254343948,"results":"10","hashOfConfig":"7"},{"size":221,"mtime":1609254058192,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"11329x5",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/himanshu/codeacademy/random-color-picker/src/index.js",["25"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Random from \"./Random\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Random />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["26","27"],"/Users/himanshu/codeacademy/random-color-picker/src/App.js",[],"/Users/himanshu/codeacademy/random-color-picker/src/reportWebVitals.js",[],"/Users/himanshu/codeacademy/random-color-picker/src/Random.js",["28"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"./Button\";\n\nconst Random = () => {\n  const [color, setColor] = useState([0, 122, 255]);\n\n  useEffect(() => {\n    applyColor();\n  }, [color]);\n\n  const formatColor = (ary) => {\n    return \"rgb(\" + ary.join(\", \") + \")\";\n  };\n\n  const isLight = () => {\n    const rgb = color;\n    return rgb.reduce((a, b) => a + b) < 127 * 3;\n  };\n\n  const applyColor = () => {\n    const newColor = formatColor(color);\n    document.body.style.background = newColor;\n  };\n\n  const chooseColor = () => {\n    const random = [];\n    for (let i = 0; i < 3; i++) {\n      random.push(Math.floor(Math.random() * 256));\n    }\n    return random;\n  };\n\n  const handleClick = () => {\n    setColor(chooseColor());\n  };\n\n  return (\n    <div>\n      <h1 className={isLight() ? \"white\" : \"black\"}>\n        Your color is {formatColor(color)};\n      </h1>\n      <Button light={isLight()} onClick={handleClick} />\n    </div>\n  );\n};\n\nexport default Random;\n","/Users/himanshu/codeacademy/random-color-picker/src/Button.js",[],{"ruleId":"29","severity":1,"message":"30","line":4,"column":8,"nodeType":"31","messageId":"32","endLine":4,"endColumn":11},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":9,"column":6,"nodeType":"39","endLine":9,"endColumn":13,"suggestions":"40"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["41"],"no-negated-in-lhs",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'applyColor'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [applyColor, color]",{"range":"46","text":"47"},[208,215],"[applyColor, color]"]